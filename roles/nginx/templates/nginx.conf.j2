user  nginx;
worker_processes  2;
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;
events {
	worker_connections  1024;
}
http {
    server_tokens off;

	upstream myapp{
		server 127.0.0.1:8888;
	}

	server {
	   listen 80;
	   listen [::]:80;
	   server_name {{ hostname }};
	   return 301 https://$host$request_uri;
	}

	# SSL configuration
	server {
		listen 443 ssl http2;
		listen [::]:443 ssl http2;
		server_name {{ hostname }};
		access_log  /var/log/nginx/access.log;
		ssl_certificate      /etc/letsencrypt/live/{{ hostname }}/fullchain.pem;
		ssl_certificate_key  /etc/letsencrypt/live/{{ hostname }}/privkey.pem;
		include includes/security.conf;

	# Required for LE certificate enrollment using certbot
		location '/.well-known/acme-challenge' {
			default_type "text/plain";
		}

    location ^~ /node_modules/ {
        alias /home/stein/node_modules/;
    }

		location = / {
		   return 302 /xlogin/login;
		}

		# The "auth_request" module does not allow 302 responses. It considers
		# that an error. So we abuse the 401 response and rewrite that to 302
		# here in nginx.
		error_page 401 = @error401;
		location @error401 {
		   return 302 /xlogin/?redirect_uri=$scheme://$host$request_uri;
		}

		location = /guard {
		    internal;
		    rewrite ^/.* / break;
		    proxy_pass http://127.0.0.1:8101/;
		    proxy_pass_request_body off;
#		    if ($http_cookie ~* "mojolicious=([^;]+)(?:;|$)") {
#		        set $token "$1";
#		    }
#		    proxy_set_header Set-Cookie $http_cookie; #https://developers.shopware.com/blog/2015/03/02/sso-with-nginx-authrequest-module/
		    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		    proxy_set_header X-Forwarded-HTTPS 1;
		    proxy_set_header X-Forwarded-Proto "https";
		    proxy_set_header X-Real-IP $remote_addr;
		    proxy_http_version 1.1;
		    proxy_read_timeout 30;
		    proxy_send_timeout 30;
		    proxy_connect_timeout 40;
		    proxy_set_header Content-Length "";
		    proxy_set_header X-Original-URI $scheme://$host$request_uri;
		}

		{% for item in shared_services %}
		location /{{ item.service_path }} {
		    # https://ma.ttias.be/nginx-proxy-upstream-sent-big-header-reading-response-header-upstream/
		    proxy_buffer_size            64k;
            proxy_buffers              4 256k;
#            proxy_busy_buffers_size      256k;
		{% if item.service_type == "api" %}
#		    include includes/headers-tls-client-authenticate.conf;
#		    auth_request /guard;
#		    auth_request_set $saved_set_cookie $upstream_http_set_cookie;
#		    add_header Set-Cookie $saved_set_cookie;
#		    auth_request_set $x_user $upstream_http_x_user;
#		    proxy_set_header X-User $x_user;
            rewrite ^/{{ item.service_path }}/(.*) /$1 break;
		{% elif item.service_type == "private" %}
#            auth_request /guard;
#			auth_request_set $saved_set_cookie $upstream_http_set_cookie;
#			add_header Set-Cookie $saved_set_cookie;
#			auth_request_set $x_user $upstream_http_x_user;
#			proxy_set_header X-User $x_user;
		{% elif item.service_type == "public" %}
		{% else %}
			return 504 'Unknown service_type {{ item.service_type }}';
		{% endif %}
#			rewrite ^/{{ item.service_path }}/(.*) /$1 break;
		    proxy_set_header X-Original-URI $scheme://$host$request_uri;
            proxy_pass http://127.0.0.1:{{ item.upstream_port }};
		}
		{% endfor %}
	}

	# HANDLE HACKERS AND SCANNERS
	server {
		listen 443;
		listen [::]:443;
		server_name {{ hostip }};
		ssl_certificate      /etc/letsencrypt/live/{{ hostname }}/fullchain.pem;
		ssl_certificate_key  /etc/letsencrypt/live/{{ hostname }}/privkey.pem;
		include includes/security.conf;
		location / {
		    add_header Content-Type text/html;
		    return 404 'Page not found';
		}
	}

}
