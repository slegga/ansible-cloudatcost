---

- ufw:
    state: enabled
    policy: deny
    direction: incoming
  become: true
  tags: nginx

- ufw:
    rule: limit
    port: ssh
    proto: tcp
    direction: in
  become: true
  tags: nginx

- ufw:
    rule: allow
    port: 22
    direction: in
  become: true
  tags: nginx

- ufw:
    rule: allow
    port: 80
    direction: in
  become: true
  tags: nginx

- ufw:
    rule: allow
    port: 443
    direction: in
  become: true
  tags: nginx

- name: Copy nginx config
  copy:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf
    backup: yes
  become: true
  tags: nginx

- name: Sett header
  become: true
  tags: nginx
  blockinfile:
    path: /etc/nginx/nginx.conf
    insertbefore: BOF
    marker: "#{mark}ANSIBLE MANAGED HEADER"
    block: |
      user  nginx;
      worker_processes  1;
      error_log  /var/log/nginx/error.log warn;
      pid        /var/run/nginx.pid;
      events {
      worker_connections  1024;
      }
      http {

- name: Remove root dir
  lineinfile:
    destfile: /etc/nginx/nginx.conf
    state: absent
    regexp: 'root.+/html'
  become: true
  tags: ngnix

- name: insert upstream
  blockinfile:
    destfile: /etc/nginx/nginx.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK upstream"
    insertafter: "http {"

    content: "    include blockips.conf;\n      upstream myapp {\n        server 127.0.0.1:8888;\n    }"
  become: true
  tags: ngnix

- name: insert proxy settings
  blockinfile:
    destfile: /etc/nginx/nginx.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK proxy settings"
    insertafter: "^[^#]*location */ *{"
    content: |
        proxy_pass http://myapp;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
  become: true
  tags: nginx

- name: Remove servername
  lineinfile:
    destfile: /etc/nginx/nginx.conf
    state: absent
    regexp: 'www.domain.com domain.com'
  become: true
  tags: ngnix

- name: Change letsencrypt path 1
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^(.*).*www\.domain\.com(.*)$'
    line: '\1{{ hostname }}\2'
    backrefs: yes
  become: true
  tags: ngnix

- name: Change letsencrypt path 2
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^(.*).*www\.domain\.com(.*)$'
    line: '\1{{ hostname }}\2'
    backrefs: yes
  become: true
  tags: ngnix

- name: Change letsencrypt path 3
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^(.*).*www\.domain\.com(.*)$'
    line: '\1{{ hostname }}\2'
    backrefs: yes
  become: true
  tags: ngnix

- name: Change letsencrypt path 4
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^(.*).*www\.domain\.com(.*)$'
    line: '\1{{ hostname }}\2'
    backrefs: yes
  become: true
  tags: ngnix

- name: Sett footer
  tags: nginx
  become: true
  blockinfile:
    path: /etc/nginx/nginx.conf
    marker: "#{mark}ANSIBLE MANAGED FOOTER"
    block: |
      }

- name: Copy blocked ip address file
  copy:
    src: blockips.conf
    dest: /etc/nginx/blockips.conf
    owner: root
    group: root
    mode: 0644
  become: true
  tags: nginx

- name: Test if new config is ok
  command: "/usr/sbin/nginx -t"
  changed_when: False
  become: true
  tags:
    - nginx

#- name: Work a round nginx bug
#  shell: 'ps -ef|grep nginx|grep master|grep -v grep|tr -s " " | cut -d " " -f2 >/run/nginx.pid'
#  become: yes
#  become_user: root
#  tags:
#    - nginx

      #prøv service nginx status     på hjernen
      #Må komfe
      #tilnød ps -aux | grep nginx
      # service fungerer rett og slett ikke. Får bruke
  #  service: name=nginx state=started enabled=yes
  # command: "service nginx start" #virker ikke

#- name: check if nginx is running
#  stat:
#    path: /var/run/nginx.pid
#  register: nginxstat

- name: Set sellinux to work with nginx
  command: setsebool httpd_can_network_connect on -P
  become: yes


- name: Make sure a service is running
  systemd:
    state: started
    name: nginx
    enabled: yes
  become: yes
  tags:
    - nginx

#- name: Reload nginx.
#  become: yes
#  command: "/usr/sbin/nginx -s reload"
#  when: nginxstat.stat.size > 1

#- name: Start nginx
#  become: yes
#  command: "/usr/sbin/nginx"
#  when: nginxstat.stat.size < 2
#  tags:
#    - nginx


#- hosts: localhost
#  become: true
#  roles:
#    - role: nginxinc.nginx
